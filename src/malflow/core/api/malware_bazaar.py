import os
from typing import Tuple, Dict

import pyzipper
import requests
from requests import Response

from malflow.util.logger import Logger
from malflow.util.misc import ensure_dir


def json_request(func):
    def decorated(*args, **kwargs) -> Tuple[int, Dict, str]:
        try:
            response: Response
            response = func(*args, **kwargs)
            return response.status_code, response.json(), "OK"
        except Exception as e:
            return 500, {}, f"Request exception: {e}"

    return decorated


def file_request(func):
    def decorated(*args, **kwargs) -> Tuple[int, Dict, str]:
        try:
            response: Response
            response = func(*args, **kwargs)
            ensure_dir(args[1])
            download_path = os.path.join(args[1], f"{args[0]}.mbazaar.download")
            with open(download_path, "wb") as f:
                f.write(response.content)

            return response.status_code, {"path": download_path}, "OK"
        except Exception as e:
            return 500, {}, f"Request exception: {e}"

    return decorated


class MalwareBazaarAPI:
    """
    https://bazaar.abuse.ch/api/
    """

    URL = "https://mb-api.abuse.ch/api/v1/"

    @staticmethod
    @json_request
    def get_info(hash: str) -> Response:
        return requests.post(MalwareBazaarAPI.URL, data={
            "query": "get_info",
            "hash": hash
        }, timeout=5)

    @staticmethod
    @file_request
    def __download_sample(sha256: str, download_dir: str = "./") -> Response:
        return requests.post(MalwareBazaarAPI.URL, data={
            "query": "get_file",
            "sha256_hash": sha256
        }, timeout=5)

    @staticmethod
    def download_sample(sha256: str, download_dir: str = "./"):
        code, data, msg = MalwareBazaarAPI.__download_sample(sha256, download_dir)
        if code != 200:
            return code, {}, msg
        download_path = data["path"]
        try:
            with pyzipper.AESZipFile(download_path, "r", compression=pyzipper.ZIP_DEFLATED,
                                     encryption=pyzipper.WZ_AES) as extracted_zip:
                extracted_zip.extractall(path=download_dir, pwd="infected".encode())
                filename = extracted_zip.filelist[0].filename

            if not filename.startswith(sha256):
                raise Exception(f"Zip content is malformed: {download_path}")

            extension = filename.split(".")[1]
            if extension not in ["exe", "dll", "xls"]:
                raise Exception(f"Zip content has unknown extension [{extension}]: {download_path}")

            current_path = os.path.join(download_dir, filename)
            final_path = current_path.replace(extension, "mbazaar")
            os.rename(current_path, final_path)
            os.remove(download_path)
            return 200, {"path": final_path}, "OK"
        except Exception as e:
            Logger.error(f"Could not unzip MalwareBazaar sample: {e}")
            return 500, {}, e
